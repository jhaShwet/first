#include <stdio.h>
#include <stdlib.h>
#define MAX_PROCESS 100
 
struct process {
    int pid;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};
 
typedef struct process Process;
double avgW;
double avgT;
int wait_total;
int tat_total; 
void sortBurst(Process p[], int n);
void getWaitTime(Process p[], int n);
void getTatTime(Process p[], int n);
void gantt_chart(Process p[], int n);
 
int main()
{
    FILE *f;
    char filename[25],c;
    printf("Enter filename:");
    scanf("%s",filename);
    f=fopen(filename,"r");
    if(f==NULL)
    {
        printf("Can't open file!");
        exit(0);
    }
    while(c!=EOF)
    {
        printf("%c",c);
        c=fgetc(f);
    }
    fclose(f);
    Process p[MAX_PROCESS];
    int n, i, j;
    puts("\n\n**SHORTEST JOB FIRST SCHEDULING ALGORITHM**\n");
    printf("Enter total process: ");
    scanf("%d", &n);
    printf("Enter burst time for each process:-\n");
    for(i=0; i<n; i++) {
        printf("P[%d]: ", i+1);
        scanf("%d", &p[i].burst_time);
        p[i].pid = i+1;
    }
 
    sortBurst(p, n);
    getWaitTime(p, n);
    getTatTime(p, n);
    avgW= (double) ( (double)wait_total / (double) n );
    avgT= (double) ( (double)tat_total / (double) n );
 
    puts("");
    printf("Average Waiting Time: %.2lf\n",avgW);
    printf("Average Turnaround Time: %.2lf\n\n",avgT);
    printf("Gantt Chart:-\n");
    gantt_chart(p, n);
    return 0;
}
 
void sortBurst(Process p[], int n)
{
    int i, j;
    Process temp;
    for(i=0; i<n-1; i++) {
        for(j=0; j<n-1-i; j++) {
            if(p[j].burst_time > p[j+1].burst_time) {
                temp = p[j];
                p[j] = p[j+1];
                p[j+1] = temp;
            }
        }
    }
}
 
void getWaitTime(Process p[], int n)
{
    int i;
    wait_total = 0;
    p[0].waiting_time = 0;
    for(i=1; i<n; i++) {
        p[i].waiting_time = p[i-1].waiting_time + p[i-1].burst_time;
        wait_total += p[i].waiting_time;
    }
}
void getTatTime(Process p[], int n)
{
    int i;
    tat_total = 0;
    for(i=0; i<n; i++) {
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time;
        tat_total += p[i].turnaround_time;
    }
} 
void gantt_chart(Process p[], int n)
{
    int i, j;
    int last = p[n-1].burst_time + ( n== 1 ? 0 : p[n-1].waiting_time);
    // printing top bar
    printf(" ");
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n|");
    // middle position
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time-1; j++) printf(" ");
        printf("p%d", p[i].pid);
        for(j=0; j<p[i].burst_time-1; j++) printf(" ");
        printf("|");
    }
    printf("\n ");
    // bottom bar
    for(i=0; i<n; i++) {
        for(j=0; j<p[i].burst_time; j++) printf("--");
        printf(" ");
    }
    printf("\n");
 
    // printing waiting time
    int minus = 0;
    for(i=0; i<n; i++) {
        if(p[i].waiting_time>9) printf(" ");
        printf("%d", p[i].waiting_time);
        if(p[i+1].waiting_time>9){
          minus = 1;
        }
        if(i+1 == n )  if (last>9) minus = 1;
        for(j=0; j<p[i].burst_time-minus; j++) printf("  ");
 
    }
    if(last>9) printf(" ");
    printf("%d\n", last);
}

//txt file
Process  Arrival_time   Burst_time
P1          3             5
P2          0             8
P3          2             9
P4          1             4

//output
Enter filename:ip.txt
Process  Arrival_time   Burst_time
P1          3             5
P2          0             8
P3          2             9
P4          1             4

**SHORTEST JOB FIRST SCHEDULING ALGORITHM**

Enter total process: 4
Enter burst time for each process:-
P[1]: 5
P[2]: 8
P[3]: 9
P[4]: 4

Average Waiting Time: 7.50
Average Turnaround Time: 14.00

Gantt Chart:-
 -------- ---------- ---------------- ------------------ 
|   p4   |    p1    |       p2       |        p3        |
 -------- ---------- ---------------- ------------------ 
0        4          9               17                 26